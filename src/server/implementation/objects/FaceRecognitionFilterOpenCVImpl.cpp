/* Autogenerated with kurento-module-creator */

#include "FaceRecognitionFilterOpenCVImpl.hpp"
#include <ctime>

namespace kurento
{
namespace module
{
namespace facerecognitionfilter
{

FaceRecognitionFilterOpenCVImpl::FaceRecognitionFilterOpenCVImpl ()
{
  this->running = false;
}

void FaceRecognitionFilterOpenCVImpl::process (cv::Mat &mat)
{
  // TODO make changing model dynamic
  if (this->running) {
    int label = -1;
    double prediction = -1.0;
    std::time_t frameTime = std::time(nullptr);
    this->p_face_training->get_face_recognition().predict(
            LBPH, mat,
            label, prediction,
            this->targetWidth, this->targetHeight,
            this->minimumWidthFace, this->minimumHeightFace);

    if (prediction >= 0.0 && prediction < this->confidenceThreshold) {
      std::string labelString;
      std::ostringstream convert;
      convert << label;
      labelString = convert.str();

      FaceDetected detected(getSharedPtr(), FaceDetected::getName(), labelString, prediction, "lbph", (int) frameTime);
      signalFaceDetected(detected);

      // stop detecting once recognized
      this->running = false;
    }
  }
}

void FaceRecognitionFilterOpenCVImpl::loadModel (std::shared_ptr<FaceTrainingModelParam> faceTrainingParam)
{
  this->p_face_training.reset(new FaceTraining(faceTrainingParam->getDirPath()));
  this->p_face_training->get_face_recognition().load_cascade(faceTrainingParam->getFacedetectionCascade());
  this->p_face_training->load();

  this->targetWidth = faceTrainingParam->getTargetWidth();
  this->targetHeight = faceTrainingParam->getTargetHeight();
  this->minimumWidthFace = faceTrainingParam->getMinimumWidthFace();
  this->minimumHeightFace = faceTrainingParam->getMinimumHeightFace();
  this->confidenceThreshold = faceTrainingParam->getConfidenceThreshold();
}

void FaceRecognitionFilterOpenCVImpl::start ()
{
  this->running = true;
}

void FaceRecognitionFilterOpenCVImpl::stop ()
{
  this->running = false;
}

} /* facerecognitionfilter */
} /* module */
} /* kurento */
